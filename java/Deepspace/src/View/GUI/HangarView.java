/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.GUI;

import controller.Controller;
import deepspace.HangarToUI;
import deepspace.ShieldToUI;
import deepspace.WeaponToUI;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.BorderFactory;

/**
 *
 * @author alvaro
 */
public class HangarView extends javax.swing.JPanel {

    /**
     * Creates new form HangarView
     */
    public HangarView() {
        initComponents();
    }
    
    public void setHangar(HangarToUI han){
        if(han == null){
            setVisible(false);
        }
        else{
            hangarPanel.removeAll();
            
            String title = "Hangar con espacio maximo " + han.getMaxElements();
            
            hangarPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLACK), title));
            
            ArrayList<WeaponToUI> weaponshangar = han.getWeapons();
            
            for(WeaponToUI w : weaponshangar){
                WeaponView weaponView = new WeaponView();
                weaponView.setWeapon(w);
                
                hangarPanel.add(weaponView);
            }
            
            ArrayList<ShieldToUI> shieldBoostershangar = han.getShieldBoosters();
        
            for(ShieldToUI s : shieldBoostershangar){
                ShieldView shieldView = new ShieldView();
                shieldView.setShield(s);
                
                hangarPanel.add(shieldView);
            }
        }
        
        repaint();
        revalidate();
        
    }
    
    void getSelectedInHangar(ArrayList<Integer> weaponsSelected, ArrayList<Integer> shieldsSelected){
        int nw = Controller.getInstance().getUIversion().getCurrentStation().getHangar().getWeapons().size();
        
        for(int i=0; i<nw; i++){
            Component c = hangarPanel.getComponent(i);
            
            if(((CombatElementView) c).isSelected()){
                weaponsSelected.add(i);
            }
        }
        
        
        int ns = Controller.getInstance().getUIversion().getCurrentStation().getHangar().getShieldBoosters().size();
                            
        for(int i=0; i<ns; i++){
            Component c = hangarPanel.getComponent(i+nw);
            
            if(((CombatElementView) c).isSelected()){
                shieldsSelected.add(i);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hangarScrollPanel = new javax.swing.JScrollPane();
        hangarPanel = new javax.swing.JPanel();

        hangarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Hangar"));
        hangarScrollPanel.setViewportView(hangarPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hangarScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hangarScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel hangarPanel;
    private javax.swing.JScrollPane hangarScrollPanel;
    // End of variables declaration//GEN-END:variables
}
